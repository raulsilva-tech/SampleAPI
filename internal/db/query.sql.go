// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createEvent = `-- name: CreateEvent :exec
insert into events (id,event_type_id,user_id, created_at) values (?,?,?,?)
`

type CreateEventParams struct {
	ID          string
	EventTypeID string
	UserID      string
	CreatedAt   time.Time
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.ID,
		arg.EventTypeID,
		arg.UserID,
		arg.CreatedAt,
	)
	return err
}

const createEventType = `-- name: CreateEventType :exec
insert into event_types (id,code,description,created_at,updated_at) values (?,?,?,?,?)
`

type CreateEventTypeParams struct {
	ID          string
	Code        string
	Description sql.NullString
	CreatedAt   time.Time
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateEventType(ctx context.Context, arg CreateEventTypeParams) error {
	_, err := q.db.ExecContext(ctx, createEventType,
		arg.ID,
		arg.Code,
		arg.Description,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const createUser = `-- name: CreateUser :exec
insert into users (id,name,email,password,created_at,updated_at) values (?,?,?,?,?,?)
`

type CreateUserParams struct {
	ID        string
	Name      string
	Email     string
	Password  string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec
delete from events where id =?
`

func (q *Queries) DeleteEvent(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, id)
	return err
}

const deleteEventType = `-- name: DeleteEventType :exec
delete from event_types where id =?
`

func (q *Queries) DeleteEventType(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEventType, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
delete from users where id =?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getEvent = `-- name: GetEvent :one
select id, created_at, user_id, event_type_id from events where id = ?
`

func (q *Queries) GetEvent(ctx context.Context, id string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.EventTypeID,
	)
	return i, err
}

const getEventType = `-- name: GetEventType :one
select id, code, description, created_at, updated_at from event_types where id = ?
`

func (q *Queries) GetEventType(ctx context.Context, id string) (EventType, error) {
	row := q.db.QueryRowContext(ctx, getEventType, id)
	var i EventType
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
select id, name, email, password, created_at, updated_at from users where id = ?
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEventTypes = `-- name: ListEventTypes :many
select id, code, description, created_at, updated_at from event_types
`

func (q *Queries) ListEventTypes(ctx context.Context) ([]EventType, error) {
	rows, err := q.db.QueryContext(ctx, listEventTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EventType
	for rows.Next() {
		var i EventType
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
select id, created_at, user_id, event_type_id from events
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.EventTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
select id, name, email, password, created_at, updated_at from users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :exec
update events set event_type_id=?,user_id=? where id =?
`

type UpdateEventParams struct {
	EventTypeID string
	UserID      string
	ID          string
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.ExecContext(ctx, updateEvent, arg.EventTypeID, arg.UserID, arg.ID)
	return err
}

const updateEventType = `-- name: UpdateEventType :exec
update event_types set code =?, description =?, updated_at = ? where id =?
`

type UpdateEventTypeParams struct {
	Code        string
	Description sql.NullString
	UpdatedAt   sql.NullTime
	ID          string
}

func (q *Queries) UpdateEventType(ctx context.Context, arg UpdateEventTypeParams) error {
	_, err := q.db.ExecContext(ctx, updateEventType,
		arg.Code,
		arg.Description,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
update users set name =?, email = ?, password = ?, updated_at = ? where id =?
`

type UpdateUserParams struct {
	Name      string
	Email     string
	Password  string
	UpdatedAt sql.NullTime
	ID        string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
